import{c as e,f as n,k as t,a as i,d as o}from"./vendor.ebec2970.js";!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver((e=>{for(const t of e)if("childList"===t.type)for(const e of t.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&n(e)})).observe(document,{childList:!0,subtree:!0})}function n(e){if(e.ep)return;e.ep=!0;const n=function(e){const n={};return e.integrity&&(n.integrity=e.integrity),e.referrerpolicy&&(n.referrerPolicy=e.referrerpolicy),"use-credentials"===e.crossorigin?n.credentials="include":"anonymous"===e.crossorigin?n.credentials="omit":n.credentials="same-origin",n}(e);fetch(e.href,n)}}();function a(e){return{data:{id:e.id,source:e.from,target:e.to}}}function r(e){return{data:{id:e.id,parent:e.parentGroup,title:e.title},style:{width:200,height:100}}}function s(e){return{data:{id:e.id,parent:e.parentGroup,title:e.title},style:{width:e.width,height:e.height}}}e.use(n),e.use(t),e.use(i),e.use(o);const d={force:{cose:{options:{name:"cose",ready:function(){},avoidOverlap:!0,stop:function(){},animate:!0,animationEasing:void 0,animationDuration:void 0,animateFilter:function(e,n){return!0},animationThreshold:250,refresh:20,fit:!0,padding:30,boundingBox:void 0,nodeDimensionsIncludeLabels:!1,randomize:!1,componentSpacing:40,nodeRepulsion:function(e){return 20},nodeOverlap:4,idealEdgeLength:function(e){return 32},edgeElasticity:function(e){return 32},nestingFactor:1.2,gravity:1,numIter:1e3,initialTemp:1e3,coolingFactor:.99,minTemp:1},description:"The cose (Compound Spring Embedder) layout uses a physics simulation to lay out graphs. It works well with noncompound graphs and it has additional logic to support compound graphs well.",link:"https://js.cytoscape.org/#layouts/cose"},fcose:{options:{name:"fcose",quality:"proof",randomize:!0,fit:!0,padding:50,nodeDimensionsIncludeLabels:!1,uniformNodeDimensions:!1,packComponents:!0,step:"all",samplingType:!0,sampleSize:25,nodeSeparation:75,piTol:1e-7,nodeRepulsion:e=>50,idealEdgeLength:e=>50,edgeElasticity:e=>1,nestingFactor:3,numIter:2e3,tile:!1,tilingPaddingVertical:10,tilingPaddingHorizontal:10,gravity:.5,gravityRangeCompound:1.5,gravityCompound:1,gravityRange:3.8,initialEnergyOnIncremental:.3,fixedNodeConstraint:void 0,alignmentConstraint:void 0,relativePlacementConstraint:void 0,ready:()=>{},stop:()=>{}},description:'fCoSE (pron. "f-cosay", fast Compound Spring Embedder), is a faster version of our earlier compound spring embedder algorithm named CoSE, implemented as a Cytoscape.js extension by i-Vis Lab in Bilkent University.\nfCoSE layout algorithm combines the speed of spectral layout with the aesthetics of force-directed layout. fCoSE runs up to 2 times as fast as CoSE while achieving similar aesthetics.',link:"https://github.com/iVis-at-Bilkent/cytoscape.js-fcose"},cola:{options:{name:"cola",animate:!1,refresh:1,maxSimulationTime:1e4,ungrabifyWhileSimulating:!0,fit:!0,padding:30,boundingBox:void 0,nodeDimensionsIncludeLabels:!1,ready:function(){},stop:function(){},randomize:!1,avoidOverlap:!0,handleDisconnected:!0,convergenceThreshold:.01,nodeSpacing:function(e){return 30},flow:void 0,alignment:void 0,gapInequalities:void 0,edgeLength:void 0,edgeSymDiffLength:void 0,edgeJaccardLength:void 0,unconstrIter:void 0,userConstIter:void 0,allConstIter:void 0},description:"The cola layout uses a force-directed physics simulation with several sophisticated constraints, written by Tim Dwyer. For more information about Cola and its parameters, refer to its documentation. It supports noncompound and compound graphs well.",link:"https://github.com/cytoscape/cytoscape.js-cola"}},hierarchical:{bfs:{options:{name:"breadthfirst",directed:!1,padding:30,circle:!1,grid:!0,spacingFactor:2,boundingBox:void 0,avoidOverlap:!0,nodeDimensionsIncludeLabels:!1},description:"The breadthfirst layout puts nodes in a hierarchy, based on a breadthfirst traversal of the graph. It is best suited to trees and forests in its default top-down mode, and it is best suited to DAGs in its circle mode.",link:"https://js.cytoscape.org/#layouts/breadthfirst"},klay:{options:{name:"klay",nodeDimensionsIncludeLabels:!1,fit:!0,padding:20,animate:!1,animateFilter:function(e,n){return!0},animationDuration:500,animationEasing:void 0,transform:function(e,n){return n},ready:void 0,stop:void 0,klay:{addUnnecessaryBendpoints:!1,aspectRatio:1.6,borderSpacing:20,compactComponents:!1,crossingMinimization:"LAYER_SWEEP",cycleBreaking:"GREEDY",direction:"UNDEFINED",edgeRouting:"ORTHOGONAL",edgeSpacingFactor:.5,feedbackEdges:!1,fixedAlignment:"NONE",inLayerSpacingFactor:1,layoutHierarchy:!1,linearSegmentsDeflectionDampening:.3,mergeEdges:!1,mergeHierarchyCrossingEdges:!0,nodeLayering:"NETWORK_SIMPLEX",nodePlacement:"BRANDES_KOEPF",randomizationSeed:1,routeSelfLoopInside:!1,separateConnectedComponents:!0,spacing:30,thoroughness:10},priority:function(e){return null}},description:"KLayJS is a layer-based layout algorithm that is particularly suited for node-link diagrams with an inherent direction and ports (explicit attachment points on a node's border). It is based on the ideas originally introduced by Sugiyama et al.",link:"https://github.com/kieler/klayjs"},dagre:{options:{name:"dagre",nodeSep:void 0,edgeSep:void 0,rankSep:void 0,rankDir:void 0,ranker:"tight-tree",minLen:function(e){return 1},edgeWeight:function(e){return 1},fit:!0,padding:30,spacingFactor:void 0,nodeDimensionsIncludeLabels:!1,animate:!1,animateFilter:function(e,n){return!0},animationDuration:500,animationEasing:void 0,boundingBox:void 0,transform:function(e,n){return n},ready:function(){},stop:function(){}},description:"Complex multipart algorithm. See articles in detailed description",link:"https://github.com/dagrejs/dagre/wiki#recommended-reading"}}};document.querySelector("#app").innerHTML='\n<div class="toolbar">\n  <input id=\'upload-file\' type="file">\n  <ul>\n    <li class="group">\n    Force-directed\n    <ul id="force" class="layouts">\n    </ul>\n    </li>\n    <li class="group">\n    Hierarchical\n    <ul id="hierarchical" class="layouts">\n    </ul>\n    </li>\n  </ul>\n  <p id="description"></p>\n  <a id="more" href="#" target="_blank" rel="noopener noreferrer" style="display: none">More</a>\n</div>\n<h2 id="algorithm-name">default</h2>\n<div id=\'cy\'></div>\n';let c=e({container:document.getElementById("cy"),elements:[],style:[{selector:"node",css:{content:"data(title)","text-valign":"center","text-halign":"center",shape:"round-rectangle"}},{selector:"edge",css:{"curve-style":"bezier","target-arrow-shape":"triangle"}}]});function l(e,n){var t;e.elements().remove(),e.add([...(t=n).groups.map(s),...t.nodes.map(r),...t.connections.map(a)]),u("hierarchical","bfs")}function u(e,n){document.querySelector("#description").textContent=d[e][n].description;const t=document.querySelector("#more");t.href=d[e][n].link,t.style.display="inline",document.querySelector("#algorithm-name").textContent=n,c.layout(d[e][n].options).run()}c.viewport({zoom:.5}),Object.entries(d).forEach((([e,n])=>{let t=document.querySelector(`#${e}`);Object.keys(n).forEach((n=>{const i=document.createElement("li"),o=document.createElement("button");i.append(o),o.innerText=n,o.addEventListener("click",(()=>{u(e,n)})),t.append(i)}))}));document.querySelector("#upload-file").addEventListener("change",(e=>{const n=e.target.files[0],t=new FileReader;t.readAsText(n),t.onload=function(){const e=JSON.parse(t.result);l(c,e)},t.onerror=function(){console.log(t.error)}}));
